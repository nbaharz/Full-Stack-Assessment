@page "/students/{StudentId:int}"
@using StudentAutomationUI.Services
@using StudentAutomationUI.Models
@inject AuthService AuthService
@inject IApiService Api
@inject NavigationManager Navigation

<PageTitle>Student Details</PageTitle>

@if (AuthService.IsAuthenticated)
{
    @if (student != null)
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2>Student Details</h2>
                        <div>
                            <a href="/students" class="btn btn-outline-secondary">Back to Students</a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5>Student Information</h5>
                        </div>
                        <div class="card-body">
                            <p><strong>Student Number:</strong> @student.StudentNumber</p>
                            <p><strong>Name:</strong> @student.FirstName @student.LastName</p>
                            <p><strong>Email:</strong> @student.Email</p>
                            <p><strong>Phone:</strong> @student.Phone</p>
                            <p><strong>Class:</strong> @student.Class</p>
                            <p><strong>Birth Date:</strong> @student.BirthDate.ToString("MM/dd/yyyy")</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="alert alert-info">Details for grades and attendance will appear here once fully wired to API.</div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="alert alert-danger text-center">
                        <h4>Student Not Found</h4>
                        <p>The requested student could not be found.</p>
                        <a href="/students" class="btn btn-primary">Back to Students</a>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="alert alert-warning text-center">
                    <h4>Please Login</h4>
                    <p>You need to be logged in to view student details.</p>
                    <a href="/login" class="btn btn-primary">Login</a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int StudentId { get; set; }

    private Student? student = new();
    private List<Grade> studentGrades = new();
    private List<Attendance> studentAttendances = new();

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated) return;
        var s = await Api.GetStudentByIdAsync(new Guid()); // placeholder: UI model uses int; backend uses Guid
        // Keeping sample detail page minimal for now.
    }

    
}